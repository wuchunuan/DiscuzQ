
def flutterProjectRoot = rootProject.projectDir.parentFile.toPath()
def plugins = new Properties()
def pluginsFile = new File(flutterProjectRoot.toFile(), '.flutter-plugins')
if (pluginsFile.exists()) {
    pluginsFile.withReader('UTF-8') { reader -> plugins.load(reader) }
}

buildscript {
    ext.kotlin_version = '1.3.50'
    ext.support_version ='23.1.1'
    repositories {
        maven { url 'http://maven.aliyun.com/nexus/content/groups/public' }
        maven{ url 'http://maven.aliyun.com/nexus/content/repositories/google'}
        maven{ url 'http://maven.aliyun.com/nexus/content/repositories/jcenter'}
        // google()
        // jcenter()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:3.3.0'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

allprojects {
    repositories {
        maven { url 'http://maven.aliyun.com/nexus/content/groups/public' }
        maven{ url 'http://maven.aliyun.com/nexus/content/repositories/google'}
        maven{ url 'http://maven.aliyun.com/nexus/content/repositories/jcenter'}
        // google()
        // jcenter()
        flatDir {
            dirs "${plugins.get("flutter_tencentplayer")}android/libs"
        }
    }
}

configurations.all {
    resolutionStrategy {
        force 'com.android.support:appcompat-v7:27.1.0'
    }
}

rootProject.buildDir = '../build'

subprojects {
    project.buildDir = "${rootProject.buildDir}/${project.name}"
}

subprojects {
    project.evaluationDependsOn(':app')
}

subprojects {
    project.configurations.all {
        resolutionStrategy.eachDependency { details ->
            if (details.requested.group == 'com.github.bumptech.glide'
                    && details.requested.name.contains('glide')) {
                details.useVersion "4.9.0"
            }
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
